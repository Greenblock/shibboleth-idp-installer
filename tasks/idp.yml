---
- name: 'Set shared facts'
  set_fact:
    idp_dist_archive_path='{{ installer.path }}/shibboleth-identity-provider-{{ shib_idp.version }}.tar.gz'

- name: 'Create Shibboleth IdP source root directory'
  file:
    name: '{{ shib_idp.src_root }}'
    state: directory
    owner: root
    group: jetty
    mode: 0750

- name: 'Download Shibboleth IdP distribution'
  get_url:
    url: 'http://shibboleth.net/downloads/identity-provider/{{ shib_idp.version }}/shibboleth-identity-provider-{{ shib_idp.version }}.tar.gz'
    dest: '{{ idp_dist_archive_path }}'
    sha256sum: '{{ shib_idp.sha256sum }}'

- name: 'Extract Shibboleth IdP distribution'
  shell: >
    umask 0027;
    tar zx -C {{ shib_idp.src_root }} -f {{ idp_dist_archive_path }} --no-same-permissions;
    chgrp -R jetty {{ shib_idp.src }}
    creates={{ shib_idp.src }}

- name: 'Set Shibboleth IdP source directory permissions'
  file:
    name: '{{ shib_idp.src }}'
    state: directory
    owner: root
    group: jetty
    mode: 0750

- name: 'Create default jetty profile'
  template:
    dest: '/etc/default/jetty'
    src: 'assets/{{inventory_hostname}}/idp/sys/jetty-profile'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Create shibboleth start.ini'
  template:
    dest: '{{ jetty.base }}/start.ini'
    src: 'templates/idp/start.ini'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set backchannel.ini'
  template:
    dest: '{{ jetty.base }}/start.d/backchannel.ini'
    src: 'templates/idp/backchannel.ini'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Create jetty-logging.properties'
  template:
    dest: '{{ jetty.base }}/resources/jetty-logging.properties'
    src: 'templates/idp/jetty-logging.properties'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Create Logback access configuration'
  template:
    dest: '{{ jetty.base }}/etc/logback-access.xml'
    src: 'templates/idp/logback-access.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Create IdP context in jetty'
  template:
    dest: '{{ jetty.base }}/webapps/idp.xml'
    src: 'templates/idp/idp.xml'
    owner: root
    group: jetty
    mode: 0640

# Wraps the Shibboleth IdP installer
- name: 'Create installer script'
  template:
    dest: '{{ shib_idp.src_root }}/install-{{ shib_idp.version }}.sh'
    src: 'templates/idp/install.sh'
    owner: root
    group: root
    mode: 0700

- name: 'Create installer properties'
  template:
    dest: '{{ shib_idp.src_root }}/install-{{ shib_idp.version }}.properties'
    src: 'templates/idp/install.properties'
    owner: root
    group: root
    mode: 0700

- name: 'Run IdP install'
  command: '{{ shib_idp.src_root }}/install-{{ shib_idp.version }}.sh'
  args:
    creates: '{{ shib_idp.home }}'

- name: 'Install aaf-shib-ext library'
  get_url:
    url: 'https://bintray.com/artifact/download/ausaccessfed/libs/aaf-shib-ext-{{ aaf_shib_ext.version }}.jar'
    dest: '{{ shib_idp.home }}/edit-webapp/WEB-INF/lib/aaf-shib-ext-{{ aaf_shib_ext.version }}.jar'

- name: 'Install jetty-dta-ssl'
  get_url:
    url: 'https://build.shibboleth.net/nexus/content/repositories/releases/net/shibboleth/utilities/jetty9/jetty9-dta-ssl/{{ jetty.dta_ssl.version }}/jetty9-dta-ssl-{{ jetty.dta_ssl.version }}.jar'
    dest: '{{ jetty.base }}/lib/ext/jetty9-dta-ssl-{{ jetty.dta_ssl.version }}.jar'

- name: 'Install Jars - commons-dbcp2'
  get_url:
    url: 'http://apache.mirror.digitalpacific.com.au//commons/dbcp/binaries/commons-dbcp2-{{ additional_jars.commons_dbcp2.version }}-bin.tar.gz'
    dest: '{{ installer.path }}/commons-dbcp2-{{ additional_jars.commons_dbcp2.version }}-bin.tar.gz'

- name: 'Extract commons-dbcp2 distribution'
  shell: >
    umask 0027;
    tar zx -C {{ installer.path }} -f {{ installer.path }}/commons-dbcp2-{{ additional_jars.commons_dbcp2.version }}-bin.tar.gz'
    creates={{ installer.path }}/commons-dbcp2-{{ additional_jars.commons_dbcp2.version }}/commons-dbcp2-{{ additional_jars.commons_dbcp2.version }}.jar

- name: 'Copy over commons-dbcp2 lib'
  command: 'cp {{ installer.path }}/commons-dbcp2-{{ additional_jars.commons_dbcp2.version }}/commons-dbcp2-{{ additional_jars.commons_dbcp2.version }}.jar {{ shib_idp.home }}/edit-webapp/WEB-INF/lib/ creates="{{ shib_idp.home }}/edit-webapp/WEB-INF/lib/commons-dbcp2-{{ additional_jars.commons_dbcp2.version }}.jar"' 

- name: 'Install Jars - commons-pool2'
  get_url:
    url: 'http://apache.uberglobalmirror.com//commons/pool/binaries/commons-pool2-{{ additional_jars.commons_pool2.version }}-bin.tar.gz'
    dest: '{{ installer.path }}/commons-pool2-{{ additional_jars.commons_pool2.version }}-bin.tar.gz'

- name: 'Extract commons-pool2 distribution'
  shell: >
    umask 0027;
    tar zx -C {{ installer.path }} -f {{ installer.path }}/commons-pool2-{{ additional_jars.commons_pool2.version }}-bin.tar.gz'
    creates={{ installer.path }}/commons-pool2-{{ additional_jars.commons_pool2.version }}/commons-pool2-{{ additional_jars.commons_pool2.version }}.jar

- name: 'Copy over commons-pool2 lib' 
  command: 'cp {{ installer.path }}/commons-pool2-{{ additional_jars.commons_pool2.version }}/commons-pool-{{ additional_jars.commons_pool2.version }}.jar {{ shib_idp.home }}/edit-webapp/WEB-INF/lib/ creates="{{ shib_idp.home }}/edit-webapp/WEB-INF/lib/commons-pool2-{{ additional_jars.commons_pool2.version }}.jar"' 

- name: 'Set customised error-messages.properties'
  template:
    dest: '{{ shib_idp.home }}/messages/error-messages.properties'
    src: 'assets/{{ inventory_hostname }}/idp/branding/error-messages.properties'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set customised IdP branding (css)'
  template:
    dest: '{{ shib_idp.home }}/edit-webapp/css/{{ item }}'
    src: 'assets/{{ inventory_hostname }}/idp/branding/css/{{ item }}'
    owner: root
    group: root
    mode: 0600
    backup: yes
  with_items:
    - consent.css
    - main.css

- name: 'Remove "dummy" IdP branding'
  file:
    path: '{{ shib_idp.home }}/edit-webapp/images/{{ item }}'
    state: absent
  with_items:
    - dummylogo-mobile.png
    - dummylogo.png

- name: 'Set customised IdP branding (images)'
  copy:
    dest: '{{ shib_idp.home }}/edit-webapp/images/{{ item }}'
    src: 'assets/{{ inventory_hostname }}/idp/branding/images/{{ item }}'
    owner: root
    group: root
    mode: 0600
    backup: yes
  with_items:
    - logo-mobile.png
    - logo.png

- name: 'Set customised views'
  template:
    dest: '{{ shib_idp.home }}/views/{{ item }}'
    src: 'assets/{{ inventory_hostname }}/idp/branding/views/{{ item }}'
    owner: root
    group: jetty
    mode: 0640
    backup: yes
  with_items:
    - error.vm
    - expiring-password.vm
    - login-error.vm
    - login.vm
    - logout-response.vm
    - logout.vm
    - resolvertest.vm

- name: 'Re-run IdP install.sh to install aaf-shib-ext and IdP branding'
  shell: '{{ shib_idp.src_root }}/install-{{ shib_idp.version}}.sh'

- name: 'Install mysql connector library'
  get_url:
    url: 'http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-{{ db.mysql_connector.version }}.tar.gz'
    dest: '{{ installer.path }}/mysql-connector-java-{{ db.mysql_connector.version }}.tar.gz'
    sha256sum: '{{ db.mysql_connector.sha256sum }}'

- name: 'Extract mysql connector library distribution'
  shell: >
    umask 0027;
    tar zx -C {{ installer.path }} -f {{ installer.path }}/mysql-connector-java-{{ db.mysql_connector.version }}.tar.gz;
    creates={{ installer.path }}/mysql-connector-java-{{ db.mysql_connector.version }}/mysql-connector-java-{{ db.mysql_connector.version }}-bin.jar

- name: 'Copy over mysql connector lib'
  command: 'cp {{ installer.path }}/mysql-connector-java-{{ db.mysql_connector.version }}/mysql-connector-java-{{ db.mysql_connector.version }}-bin.jar {{ jetty.base }}/lib/ext creates="{{ jetty.base }}/lib/ext/mysql-connector-java-{{ db.mysql_connector.version }}-bin.jar"'

- name: 'Download placeholder keystore'
  get_url:
    url: 'http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/plain/jetty-server/src/main/config/etc/keystore'
    dest: '{{ jetty.base }}/etc/keystore'

- name: 'Set jetty.base file permissions'
  file:
    name: '{{ item }}'
    owner: root
    group: jetty
    mode: 0640
  with_items:
    - '{{ jetty.base }}/lib/ext/mysql-connector-java-{{ db.mysql_connector.version }}-bin.jar'
    - '{{ jetty.base }}/etc/keystore'
    - '{{ jetty.base }}/lib/ext/jetty9-dta-ssl-{{ jetty.dta_ssl.version }}.jar'

- name: 'Create IdP log directory'
  file:
    name: /var/log/shibboleth-idp
    owner: jetty
    group: jetty
    mode: 0700
    state: directory

- name: 'Symlink IdP log directory'
  file:
    name: '{{ shib_idp.home }}/logs'
    src: /var/log/shibboleth-idp
    state: link
    owner: root
    group: root
    force: yes

- name: 'Symlink IdP src directory'
  file:
    name: '{{ shib_idp.src_root }}/current'
    src: '{{ shib_idp.src }}'
    state: link
    owner: root
    group: root
    force: yes

- name: 'Symlink IdP instance directory'
  file:
    name: '{{ shib_idp.home_root }}/current'
    src: '{{ shib_idp.home }}'
    state: link
    owner: root
    group: root
    force: yes

- name: 'Create jetty log directory'
  file:
    name: /var/log/jetty
    owner: jetty
    group: jetty
    mode: 0700
    state: directory

- name: 'Symlink jetty log directory'
  file:
    name: '{{ jetty.base }}/logs'
    src: /var/log/jetty
    state: link
    owner: root
    group: root
    force: yes

- name: 'Create empty metadata provider (federation-metadata.xml) as jetty:jetty'
  template:
    src: templates/idp/federation-metadata.xml
    dest: '{{ shib_idp.home }}/metadata/federation-metadata.xml'
    owner: jetty
    group: jetty
    mode: 0600
    backup: yes

- name: 'Set metadata provider'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/metadata-providers.xml'
    dest: '{{ shib_idp.home }}/conf/metadata-providers.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set federation attribute filter'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/metadata-based-attribute-filter.xml'
    dest: '{{ shib_idp.home }}/conf/metadata-based-attribute-filter.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set services.xml'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/services.xml'
    dest: '{{ shib_idp.home }}/conf/services.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set saml-nameid.properties'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/saml-nameid.properties'
    dest: '{{ shib_idp.home }}/conf/saml-nameid.properties'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set saml-nameid.xml'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/saml-nameid.xml'
    dest: '{{ shib_idp.home }}/conf/saml-nameid.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Get metadata certificate'
  get_url:
    url: '{{ metadata_cert_url }}'
    dest: '{{ shib_idp.home }}/credentials/federation-metadata-cert.pem'

- name: 'Set attribute resolver'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/attribute-resolver.xml'
    dest: '{{ shib_idp.home }}/conf/attribute-resolver.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set attribute filter'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/attribute-filter.xml'
    dest: '{{ shib_idp.home }}/conf/attribute-filter.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set ldap.properties'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/ldap.properties'
    dest: '{{ shib_idp.home }}/conf/ldap.properties'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set attribute-release.vm template'
  template:
    src: 'assets/{{inventory_hostname}}/idp/branding/views/attribute-release.vm'
    dest: '{{ shib_idp.home }}/views/intercept/attribute-release.vm'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set idp.properties'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/idp.properties'
    dest: '{{ shib_idp.home }}/conf/idp.properties'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set global.xml'
  template:
    src: 'assets/{{inventory_hostname}}/idp/conf/global.xml'
    dest: '{{ shib_idp.home }}/conf/global.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Set Shibboleth logback configuration'
  template:
    dest: '{{ shib_idp.home }}/conf/logback.xml'
    src: 'assets/{{inventory_hostname}}/idp/conf/logback.xml'
    owner: root
    group: jetty
    mode: 0640
    backup: yes

- name: 'Copy bilateral attribute filters'
  copy:
    src: 'assets/{{inventory_hostname}}/idp/bilateral/filters/'
    dest: '{{ shib_idp.home }}/conf'
    owner: root
    group: jetty
    mode: 640

- name: 'Copy bilateral metadata'
  copy:
    src: 'assets/{{inventory_hostname}}/idp/bilateral/metadata/'
    dest: '{{ shib_idp.home }}/metadata'
    owner: root
    group: jetty
    mode: 640

- name: 'Copy bilateral credentials'
  copy:
    src: 'assets/{{inventory_hostname}}/idp/bilateral/credentials/'
    dest: '{{ shib_idp.home }}/credentials'
    owner: root
    group: jetty
    mode: 640

- name: 'Determine if credentials from previous install exist'
  local_action:
    module: stat
    path: 'assets/{{ inventory_hostname }}/idp/credentials'
  register: idp_credentials

- include: idp-credentials.yml
  when: idp_credentials.stat.exists

- name: 'Fix IdP file permissions'
  file:
    name: '{{ shib_idp.home }}/{{ item }}'
    owner: root
    group: jetty
    mode: 0640
  with_items:
  - conf/access-control.xml
  - conf/audit.xml
  - conf/cas-protocol.xml
  - conf/credentials.xml
  - conf/errors.xml
  - conf/ldap.properties
  - conf/logback.xml
  - conf/mvc-beans.xml
  - conf/relying-party.xml
  - conf/saml-nameid.properties
  - conf/saml-nameid.xml
  - conf/saml-nameid.properties
  - conf/saml-nameid.xml
  - conf/services.properties
  - conf/session-manager.xml
  - conf/authn/authn-comparison.xml
  - conf/authn/authn-events-flow.xml
  - conf/authn/general-authn.xml
  - conf/authn/password-authn-config.xml
  - conf/authn/ldap-authn-config.xml
  - conf/c14n/simple-subject-c14n-config.xml
  - conf/c14n/subject-c14n-events-flow.xml
  - conf/c14n/subject-c14n.xml
  - conf/intercept/consent-intercept-config.xml
  - conf/intercept/profile-intercept.xml
  - conf/intercept/intercept-events-flow.xml
  - credentials/idp-backchannel.p12
  - credentials/idp-encryption.key
  - credentials/idp-signing.key
  - system/conf/services-system.xml

- name: 'Install IdP systemd unit'
  template:
    src: templates/idp/idp.service
    dest: /lib/systemd/system/idp.service
    owner: root
    group: root
    mode: 0600
    backup: yes

- meta: flush_handlers

- name: 'Enable idp service'
  service: name=idp state=restarted enabled=yes

